{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Fact  == #}
{# == Node Type Description    :This node loads data into fact table using config options distinct,multi-source  == #}

{# == Check if business key is specified  == #}

{% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}

{# == Variable check to identify type of dimension == #}

{% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

{# == To run data quality tests before data insertion == #}

    {% for test in node.tests if config.testsEnabled %}
        {% if test.runOrder == 'Before' %}
            {{ test_stage(test.name, test.continueOnFailure) }}
            {{ test.templateString }}
        {% endif %}
    {% endfor %}

{% if node.materializationType == 'table' %}

{# == Queries to be excuted before data insertion  == #}

	{% if config.preSQL %}
		{{ stage('Pre-SQL') }}
		{{ config.preSQL }}
	{% endif %}

 {# == Truncate data before data insertion  == #}

    {% if config.truncateBefore %}
        {{ stage('Truncate Fact Table') }}
        TRUNCATE TABLE {{ ref_no_link(node.location.name, node.name) }}
    {% endif %}
	
     {# == Check if business key is specified  == #}    
        
        {% if has_business_key %}

        {# == Executed if business key is specified  == #}
            
		{{ stage('Update Existing Records') }}
           
        UPDATE TGT SET 
		 {% for col in columns if not (  col.isBusinessKey or
                                                    col.isSystemCreateDate) -%}
                    [TGT].[{{col.name}}] = [SRC].[{{col.name}}]
                {% if not loop.last %}, {% endif %}
        {%- endfor -%}
		FROM {{ ref_no_link(node.location.name, node.name) }} TGT
		INNER JOIN (
        {%- for source in sources %}
                (SELECT
                {%- if config.selectDistinct %}
                DISTINCT
                {%- endif %}
                {%- for col in source.columns if not col.isSurrogateKey %}
                    {%- if col.isSystemVersion %}
                    	1
                    {%- elif col.isSystemCurrentFlag %}
                    	'Y'
                    {%- else %}
                        {{ get_source_transform(col) }}
                    {%- endif %}
                    AS [{{col.name}}]
                    {%- if not loop.last %}, {% endif %}
                {%- endfor %}
                {{ source.join }})     
                 {%- if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                     {{config.insertStrategy}}
                 {%- endif %}
        {% endfor %})AS SRC 
		ON 
		{% for col in columns if col.isBusinessKey -%}
                {% if not loop.first %}
                    AND
                {% endif %}
                [SRC].[{{col.name}}]= [TGT].[{{col.name}}]
        {% endfor %}
		WHERE 
		{%- for col in columns if not (   col.isBusinessKey or
                                                    col.isSurrogateKey or
                                                    col.isSystemVersion or
                                                    col.isSystemCurrentFlag or
                                                    col.isSystemStartDate or
                                                    col.isSystemEndDate or
                                                    col.isSystemUpdateDate or
                                                    col.isSystemCreateDate) -%}
                {%- if loop.first -%}
                    (
                {%- else %}
                    OR
                {%- endif %}
                ISNULL( CAST([SRC].[{{col.name}}] as NVARCHAR(MAX)), '**NULL**') <> ISNULL( CAST([TGT].[{{col.name}}] as NVARCHAR(MAX)), '**NULL**')
                {% if loop.last -%}
                    )
                {%- endif -%}
       {% endfor %}

	{{ stage('Insert New Records' ) }}  
     
	INSERT INTO  {{ ref_no_link(node.location.name, node.name) }} 
    (
       {%- for col in columns %}
             [{{ col.name }}] 
			{%- if not loop.last %}, {% endif %}
		{%- endfor -%} 
    )
      SELECT 
        {%- for col in columns  -%}
         {%-if not col.isSurrogateKey%}
             [SRC].[{{ col.name }}] 
          {%-else%}
              ROW_NUMBER() OVER (ORDER BY ({%- for col in columns if col.isBusinessKey -%}{%- if not loop.first %} , {%- endif %} [SRC].[{{col.name}}] {%endfor%})) 
	          + COALESCE (( SELECT MAX({%- for col in columns if col.isSurrogateKey -%}{%- if not loop.first %} , {%- endif %} [{{col.name}}] {%endfor%}) FROM {{ ref_no_link(node.location.name, node.name) }}),0) AS [{{ col.name }}] 
          {%-endif%}
			{%- if not loop.last -%}, {% endif %}
		{%- endfor %} FROM
	       ( {%- for source in sources %}
                SELECT
                {%- if config.selectDistinct %}
                DISTINCT
                {%- endif %}
                {%- for col in source.columns if not col.isSurrogateKey %}
                    {%- if col.isSystemVersion %}
                    	1
                    {%- elif col.isSystemCurrentFlag %}
                    	'Y'
                    {%- else %}
                        {{ get_source_transform(col) }}
                    {%- endif %}
                    AS [{{col.name}}]
                    {%- if not loop.last %}, {% endif %}
                {%- endfor %}
                {{ source.join }} 
                 {%- if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                     {{config.insertStrategy}}
                 {%- endif %}
        {% endfor %})AS [SRC]
		LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} AS [TGT]
		ON 
		{%- for col in columns if col.isBusinessKey -%}
                {% if not loop.first %}
                    AND
                {% endif %}
                [SRC].[{{col.name}}]= [TGT].[{{col.name}}]
        {%- endfor -%}
		WHERE 
		{% for col in columns if col.isBusinessKey -%}
                {% if not loop.first %}
                    AND
                {% endif %}
                [TGT].[{{col.name}}] IS NULL
        {% endfor -%}

        {% else %}

    {# == Executed if business key is not specified  == #}

            {{ stage('Insert new records' | string ) }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns if not col.isSurrogateKey %}
                    "{{ col.name }}"
                    {%- if not loop.last -%},{% endif %}
                {% endfor %}
            )
           {%- for source in sources %}
            (SELECT
            {%- if config.selectDistinct %}
            DISTINCT
            {%- endif %}
            {%- for col in source.columns if not col.isSurrogateKey %}

                {%- if col.isSystemVersion %}
                    1
                {%- elif col.isSystemCurrentFlag %}
                    'Y'
                {%- else %}
                    {{ get_source_transform(col) }}
                {%- endif %}
                AS [{{ col.name }}]
                {%- if not loop.last -%}, {% endif %}             
            {%- endfor %}
            {{ source.join }} ) 
            {%- if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                {{config.insertStrategy}}
            {%- endif %}
        {%- endfor %} 
        
        {% endif %}

{# == Queries to be excuted post data insertion  == #}
	
	{% if config.postSQL %}
		{{ stage('Post-SQL') }}
		{{ config.postSQL }}
	{% endif %}
	
{% endif %}

 {# == To run data quality tests after data insertion == #}

{% if config.testsEnabled %}
	{% for test in node.tests %}
		{% if test.runOrder == 'After' %}
			{{ test_stage(test.name, test.continueOnFailure) }}
			{{ test.templateString }}
        {% endif %}
	{% endfor %}

	{% for column in columns %}
		{% for test in column.tests %}
			{{ test_stage(column.name + ": " + test.name) }}
			{{ test.templateString }}
		{% endfor %}
	{% endfor %}
{% endif %}